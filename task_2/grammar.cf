-- programs ------------------------------------------------

entrypoints Block ;

-- statements ----------------------------------------------

Block.     Block ::= [Stmt] ;

separator  Stmt ";" ;

Empty.     Stmt ::= "To Be Empty Or Not To Be Empty" ;

BStmt.     Stmt ::= "{" Block "}" ;

Decl.      Stmt ::= Type [Item] ;

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

-- variables

Var.       Var ::= Type Ident ;

separator Var "," ;

-- operation on values ----------------------------------

Ass.       Stmt ::= Ident "=" Expr ;

Incr.      Stmt ::= Ident "++" ;

Decr.      Stmt ::= Ident "--" ;

Ret.       Stmt ::= "return" Expr ;

VRet.      Stmt ::= "return" ;

Brk.       Stmt ::= "break" ;

Cont.      Stmt ::= "continue" ;

If.      Stmt ::= "if" "(" Expr ")"  "{" Block "}" ;

IfElse.  Stmt ::= "if" "(" Expr ")" "{" Block "}" "else" "{" Block "}" ;

While.     Stmt ::= "while" "(" Expr ")" "{" Block "}" ;

-- Types ---------------------------------------------------

RType.     Type ::= RegType ;

FType.     Type ::= FunType ;

Int.       RegType ::= "int" ;

Str.       RegType ::= "string" ;

Bool.      RegType ::= "boolean" ;

Void.      RegType ::= "void" ;

Function.  FunType ::=  Type "(" [Type] ")" ;

separator  Type "," ;

-- expresions ----------------------------------------------

EVar.      Expr6 ::= Ident ;

ECall.     Expr6 ::= Expr6 "(" [Expr] ")" ;   

ELambda.   Expr6 ::= "fun" Type "(" [Var] ")" "{" Block "}" ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;


-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;

